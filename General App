npm init -y
npm install axios

const axios = require('axios');

async function getTrendingMemecoins(limit = 10) {  // Added a limit parameter
    const DEXSCREENER_API_URL = 'https://api.dexscreener.com/latest/dex/tokens/solana'; // Endpoint for Solana

    try {
        const response = await axios.get(DEXSCREENER_API_URL, {
          params: {  // Important: Use params for query parameters
              limit: limit, //  Limit the number of results
              // Add other parameters as needed (e.g., for filtering)
          }
        });

        const pairs = response.data.pairs;

        if (!pairs || pairs.length === 0) {
          console.log("No pairs found.");
          return []; // Return an empty array
        }

        const trendingNames = pairs.map(pair => {
          // Extract the token name.  Handle cases where it might be missing.
          const token0Name = pair.token0?.name || "Unknown Token 0";
          const token1Name = pair.token1?.name || "Unknown Token 1";

          return {
            pairAddress: pair.pairAddress,
            token0Name: token0Name,
            token1Name: token1Name,
            // Add other relevant data like price change, volume, etc.
            priceUsd: pair.priceUsd,
            volume24h: pair.volume24h,
            priceChange: pair.priceChange
          };
        });

        // Sort by volume (example) - customize as needed
        trendingNames.sort((a, b) => b.volume24h - a.volume24h); // Sort descending

        return trendingNames;

    } catch (error) {
        console.error('Error fetching data:', error);
        return []; // Return empty array in case of error
    }
}


async function displayTrendingNames() {
    const trending = await getTrendingMemecoins(20); // Get top 20, for example

    if (trending.length > 0) {
      console.log("Trending Solana Memecoins:");
        trending.forEach(coin => {
          console.log(`- ${coin.token0Name} / ${coin.token1Name} (Pair: ${coin.pairAddress})`);
          console.log(`  Price: $${coin.priceUsd}, 24h Volume: $${coin.volume24h}, Price Change: ${coin.priceChange}%`);
          console.log("--------------------");
        });
    } else {
      console.log("No trending memecoins found.");
    }

}

displayTrendingNames(); // Call the function to start the process

// Website and Graphics

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Website</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Jersey+15&display=swap');

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background: linear-gradient(to bottom, rgb(171, 56, 248), rgb(231, 128, 252));
            font-weight: bold;
            overflow: hidden;
        }

        .title {
            color: rgb(201, 51, 247);
            font-size: 10vw;
            display: flex;
            font-family: "Jersey 15";
            animation: animate 5s infinite;
            -webkit-box-reflect: below 2px linear-gradient(transparent, #0004);
            position: relative;
            z-index: 1;
        }

        .title span {
            animation: animate 5s infinite;
        }

        .title span:nth-child(even) {
            animation-delay: 0.4s;
        }

        @keyframes animate {
            0%, 18%, 20%, 50.1%, 60%, 65.1%, 80%, 90.1%, 92% {
                color: rgb(104, 104, 104);
                text-shadow: none;
            }
            18.1%, 20.1%, 30%, 50%, 60.1%, 65%, 80.1%, 90%, 92.1%, 100% {
                color: #000000;
                text-shadow: 0 0 10px rgb(96, 11, 192),
                    0 0 20px rgb(164, 29, 226),
                    0 0 40px rgb(164, 29, 226),
                    0 0 80px rgb(164, 29, 226),
                    0 0 160px rgb(164, 29, 226),
                    0 0 400px rgb(164, 29, 226);
            }
        }

        .eye {
            position: absolute;
            width: 100px;
            height: 50px;
            background-image: url("eye.png"); /* Replace with your eye image */
            background-size: cover;
            background-position: center;
            opacity: 0.3;
            pointer-events: none;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            transition: transform 0.2s ease, opacity 0.1s ease; /* Add opacity transition */
            z-index: 2;
        }

        .eye.blink {
            opacity: 0;
        }

        .icon {
            position: absolute;
            width: 50px;
            height: 50px;
            background-size: cover;
            cursor: pointer;
            transition: transform 0.5s ease, box-shadow 0.5s ease;
            z-index: 3;
        }

        .icon:hover {
            transform: scale(1.2);
        }

        .home-button {
            top: 20px;
            left: 20px;
            background-image: url("home-icon.png"); /* Replace with your home icon */
        }

        .discord-button {
            top: 20px;
            left: 80px;
            background-image: url("discord-icon.png"); /* Replace with your Discord icon */
        }

        .gmail-button {
            top: 20px;
            left: 140px;
            background-image: url("gmail-icon.png"); /* Replace with your Gmail icon */
        }
    </style>
</head>
<body>
    <div class="title">
        <span>VisionShaper&nbsp;</span>
        <span>AI</span>
    </div>
    <div class="eye"></div>
    <div class="home-button icon"></div>
    <div class="discord-button icon"></div>
    <div class="gmail-button icon"></div>

    <script>
        const eye = document.querySelector('.eye');

        document.addEventListener('mousemove', (e) => {
            const x = e.clientX;
            const y = e.clientY;
            const deltaX = x - window.innerWidth / 2;
            const deltaY = y - window.innerHeight / 2;
            eye.style.transform = `translate(${deltaX}px, ${deltaY}px) translate(-50%, -50%)`;
        });

        window.addEventListener('load', () => {
            eye.style.transform = 'translate(-50%, -50%)';
        });

        document.addEventListener('click', () => { 
            eye.classList.add('blink');
            setTimeout(() => {
                eye.classList.remove('blink');
            }, 200);
        });


        const homeButton = document.querySelector('.home-button');
        const discordButton = document.querySelector('.discord-button');
        const gmailButton = document.querySelector('.gmail-button');

        homeButton.addEventListener('click', () => {
            window.location.href = "index.html";
        });

        discordButton.addEventListener('click', () => {
            window.open("https://discord.com/", "_blank");
        });

        gmailButton.addEventListener('click', () => {
            window.open("https://mail.google.com/", "_blank");
        });
    </script>
</body>
</html>
